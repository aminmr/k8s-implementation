global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http


frontend stats
    bind *:70
    stats enable
    stats uri /monitor
    stats refresh 10s
    stats admin if TRUE
    stats auth admin:4mHBsNXc



frontend kubernetes-frontend
    bind 0.0.0.0:26443
    mode tcp
    option tcplog
    default_backend kubernetes-backend


frontend kubernetes-ingress-http
    bind *:80
    mode tcp
    default_backend kubernetes-nodes-http


frontend kubernetes-ingress-https
    bind *:443
    mode tcp
    default_backend kubernetes-nodes-https

backend kubernetes-backend
    mode tcp
    option tcp-check
    balance roundrobin
    server kmaster1 192.168.32.10:6443 check fall 3 rise 2
    server kmaster2 192.168.32.20:6443 check fall 3 rise 2
    server kmaster3 192.168.32.30:6443 check fall 3 rise 2


backend kubernetes-nodes-http
    mode http
    balance roundrobin
    option tcp-check
    server kmaster1 192.168.32.10:30863 check fall 3 rise 2
    server kmaster2 192.168.32.20:30863 check fall 3 rise 2
    server kmaster3 192.168.32.30:30863 check fall 3 rise 2


backend kubernetes-nodes-https
    mode tcp
    balance roundrobin
       server kmaster1 192.168.32.10:32055 check fall 3 rise 2
       server kmaster2 192.168.32.20:32055 check fall 3 rise 2
       server kmaster3 192.168.32.30:32055 check fall 3 rise 2




##################################################################3
# Monitoring configs

#frontend kube-controller-manager
#  bind 192.168.32.10:10252
#  http-request deny if !{ path /metrics }
#  default_backend kube-controller-manager

#backend kube-controller-manager
#  server kube-controller-manager-1 192.168.32.10:10252 ssl verify none
#  server kube-controller-manager-2 192.168.32.20:10252 ssl verify none
#  server kube-controller-manager-3 192.168.32.30:10252 ssl verify none

#frontend kube-scheduler
#  bind ${NODE_IP}:10259
#  http-request deny if !{ path /metrics }
#  default_backend kube-scheduler
#backend kube-scheduler
#  server kube-scheduler 127.0.0.1:10259 ssl verify none
